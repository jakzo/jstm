// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`default config: config prompts 1`] = `
Set {
  "isMonorepo",
  "srcDir",
  "packageName",
  "description",
  "distDir",
  "nodeMinVersion",
  "npmRegistry",
  "npmAccess",
  "repoUrl",
  "packageJsonAuthor",
  "license",
  "nodeTargetVersion",
  "mainBranch",
}
`;

exports[`default config: file structure 1`] = `
Object {
  ".changeset": Object {
    "config.json": "{
  \\"$schema\\": \\"https://unpkg.com/@changesets/config@1.4.0/schema.json\\",
  \\"changelog\\": \\"@changesets/cli/changelog\\",
  \\"commit\\": true,
  \\"linked\\": [],
  \\"access\\": \\"public\\",
  \\"baseBranch\\": \\"master\\",
  \\"updateInternalDependencies\\": \\"patch\\",
  \\"ignore\\": []
}
",
  },
  ".eslintignore": "# DO NOT MODIFY
# This file is auto-generated (make changes to ./config/.eslintignore instead)

# === Build Files ===
# Files which are the result of transforming other files in the project
dist/

# === Cache Files ===
# Generated by tools for caching
node_modules/
.*cache
.jest
.yarn
*.tsbuildinfo

# === Log Files ===
# Log output files intended to be read by people rather than the project
*.log
.coverage/

# === External Files ===
# Files commonly created by the OS or tools not defined in this project
.DS_Store

# === Generated Files ===
# Files generated by tools from the project
yarn.lock
package-lock.json
.pnp.*
/.npmignore
/.nvmrc
/.yvmrc
/.eslintrc.js
/.prettierrc.js
/.eslintignore
/.prettierignore
/.lintstagedrc.js
/.husky/pre-commit
/.husky/pre-push
/.husky/.gitignore
/tsconfig.build.json
/tsconfig.base.json
/jest.config.js

# === Custom Ignore Patterns ===
# Rules from ./config/.eslintignore will appear below
",
  ".eslintrc.js": "// DO NOT MODIFY
// This file is auto-generated (make changes to ./config/.eslintrc.js instead)
const fs = require(\\"fs\\");
const path = require(\\"path\\");

const customConfigs = fs.readdirSync(path.join(__dirname, \\"config\\"));
const customEslintrcPaths = [\\".eslintrc.json\\", \\".eslintrc.js\\"]
  .filter((name) => customConfigs.includes(name))
  .map((name) => \`./\${path.join(\\"config\\", name)}\`);

module.exports = {
  root: true,
  env: {
    node: true,
    commonjs: true,
    es2020: true,
  },
  settings: {
    \\"import/resolver\\": {
      typescript: {},
    },
  },
  parser: \\"@typescript-eslint/parser\\",
  extends: [
    \\"eslint:recommended\\",
    \\"plugin:prettier/recommended\\",
    \\"plugin:import/errors\\",
    \\"plugin:@typescript-eslint/eslint-recommended\\",
    \\"plugin:@typescript-eslint/recommended\\",
    \\"plugin:@typescript-eslint/recommended-requiring-type-checking\\",
    \\"plugin:import/typescript\\",
    ...customEslintrcPaths,
  ],
  plugins: [
    \\"@typescript-eslint/eslint-plugin\\",
    ...(process.env.VSCODE_PID ? [\\"only-warn\\"] : []),
  ],
  parserOptions: {
    sourceType: \\"module\\",
    ecmaVersion: 2020,
    tsconfigRootDir: __dirname,
    project: [\\"./tsconfig.json\\"],
  },
  overrides: [
    {
      files: [\\"**/*.{js,jsx}\\"],
      rules: {
        \\"@typescript-eslint/no-var-requires\\": \\"off\\",
        \\"@typescript-eslint/explicit-function-return-type\\": \\"off\\",
        \\"@typescript-eslint/no-unsafe-return\\": \\"off\\",
        \\"@typescript-eslint/no-unsafe-member-access\\": \\"off\\",
        \\"@typescript-eslint/no-unsafe-assignment\\": \\"off\\",
        \\"@typescript-eslint/no-unsafe-call\\": \\"off\\",
      },
    },
    {
      files: [\\"**/__*__/**/*.{js,jsx,ts,tsx}\\"],
      env: {
        jest: true,
      },
      rules: {
        \\"@typescript-eslint/no-unsafe-assignment\\": \\"off\\",
        \\"@typescript-eslint/no-unsafe-member-access\\": \\"off\\",
        \\"no-sparse-arrays\\": \\"off\\",
        \\"no-prototype-builtins\\": \\"off\\",
      },
    },
  ],
  rules: {
    // Disabled rules
    \\"no-empty\\": \\"off\\",
    \\"@typescript-eslint/no-empty-function\\": \\"off\\",
    \\"@typescript-eslint/unbound-method\\": \\"off\\",
    \\"@typescript-eslint/require-await\\": \\"off\\",
    \\"@typescript-eslint/no-empty-interface\\": \\"off\\",
    \\"@typescript-eslint/restrict-template-expressions\\": \\"off\\",
    \\"@typescript-eslint/no-explicit-any\\": \\"off\\",
    \\"@typescript-eslint/no-non-null-assertion\\": \\"off\\",

    // Modified rules
    \\"no-constant-condition\\": [\\"error\\", { checkLoops: false }],
    \\"@typescript-eslint/no-unused-vars\\": [
      \\"error\\",
      { argsIgnorePattern: \\"^_\\", varsIgnorePattern: \\"^_\\" },
    ],
    \\"@typescript-eslint/no-misused-promises\\": [
      \\"error\\",
      { checksVoidReturn: false },
    ],
    \\"@typescript-eslint/explicit-function-return-type\\": [
      \\"error\\",
      { allowExpressions: true },
    ],
    \\"@typescript-eslint/ban-types\\": [
      \\"error\\",
      {
        types: {
          // Justification: most of the time this is the type I want
          \\"{}\\": false,
        },
      },
    ],

    // Enabled rules
    \\"import/no-cycle\\": \\"error\\",
    \\"import/no-extraneous-dependencies\\": \\"error\\",
    \\"import/no-duplicates\\": [\\"error\\", { considerQueryString: true }],
    \\"import/order\\": [
      \\"error\\",
      {
        \\"newlines-between\\": \\"always\\",
        groups: [
          \\"builtin\\",
          \\"external\\",
          \\"internal\\",
          [\\"index\\", \\"sibling\\", \\"parent\\"],
        ],
        pathGroups: [
          {
            pattern: \\"react\\",
            group: \\"builtin\\",
            position: \\"before\\",
          },
        ],
        pathGroupsExcludedImportTypes: [\\"react\\"],
        alphabetize: { order: \\"asc\\" },
      },
    ],
    \\"sort-imports\\": [
      \\"error\\",
      {
        ignoreDeclarationSort: true,
        ignoreMemberSort: false,
      },
    ],
    \\"import/first\\": \\"error\\",
    \\"import/newline-after-import\\": \\"error\\",
    \\"import/no-useless-path-segments\\": \\"error\\",
    \\"import/no-self-import\\": \\"error\\",
    \\"@typescript-eslint/no-floating-promises\\": [\\"error\\", { ignoreVoid: true }],
  },
};
",
  ".github": Object {
    "workflows": Object {
      "ci.yml": "# DO NOT MODIFY
# This file is auto-generated (make another YAML file in this directory instead
# or create a file in ./config/.github/workflows/ci.yml with contents to merge)
name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - \\"*\\"

env:
  node_version: 14

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    outputs:
      release_required: \${{ steps.release_required.outputs.result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # Fetch Git history so that Changesets can check if release is required
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: \${{ env.node_version }}
      - name: Install dependencies
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Test
        run: |
          set -e
          yarn run-if-script-exists test:ci:before
          yarn test:all
          yarn run-if-script-exists test:ci:after
      - name: Check if release is required
        uses: actions/github-script@v3
        id: release_required
        with:
          script: |
            const path = require('path');
            const pnpapi = require(path.join(process.env.GITHUB_WORKSPACE, '.pnp'));
            pnpapi.setup();
            const releaseUtilsPath = pnpapi.resolveToUnqualified(
              '@changesets/release-utils',
              process.env.GITHUB_WORKSPACE
            );
            const releaseUtils = require(releaseUtilsPath);
            const { changesets } = await releaseUtils.readChangesetState();
            return changesets.length > 0;

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: test
    if: \${{ github.ref == 'refs/heads/master' && needs.test.outputs.release_required == 'true' }}
    environment: Release
    outputs:
      release_upload_url: \${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # Fetch Git history so that Changesets can generate changelogs with correct commits
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: \${{ env.node_version }}
      - name: Install dependencies
        run: yarn install --immutable --immutable-cache
      - name: Bump versions according to changeset
        run: |
          set -e
          git config --global user.name \\"github-actions[bot]\\"
          git config --global user.email \\"github-actions[bot]@users.noreply.github.com\\"
          yarn changeset version
          git push --no-verify
      - name: Publish to npm
        id: publish
        run: |
          set -e
          echo '_authToken=\${NODE_AUTH_TOKEN}' > ~/.npmrc
          yarn run-if-script-exists release:ci:before
          yarn release
          echo \\"::set-output name=version_tag::$(git describe --tags --abbrev=0)\\"
          echo \\"::set-output name=release_changelog::$(yarn ci-github-print-changelog)\\"
          yarn run-if-script-exists release:ci:after
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: \${{ secrets.NPM_TOKEN }}
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: \${{ steps.publish.outputs.version_tag }}
          release_name: \${{ steps.publish.outputs.version_tag }}
          body: \${{ steps.publish.outputs.release_changelog }}
",
    },
  },
  ".gitignore": "# === Generated Ignore Patterns (do not modify) ===
# You may add your own rules below the end of this generated section.

# Commonly ignored files
node_modules/
.*cache
.jest
*.tsbuildinfo
*.log
.coverage/
.DS_Store
CVS
.svn
.hg
.lock-wscript
.wafpickle-N
.*.swp
._*
.npmrc
.yarnrc
config.gypi
/package-lock.json

# Rules for Yarn zero-installs
.yarn/*
!.yarn/cache
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions

# jstm generated files
dist/
/.npmignore
/.nvmrc
/.yvmrc
/.eslintrc.js
/.prettierrc.js
/.eslintignore
/.prettierignore
/.lintstagedrc.js
/.husky/pre-commit
/.husky/pre-push
/.husky/.gitignore
/tsconfig.build.json
/tsconfig.base.json
/jest.config.js
# === (end generated patterns) ===

# Place custom ignore patterns below here and they will not be removed
",
  ".husky": Object {
    ".gitignore": "_
",
    "pre-commit": "#!/bin/sh

# DO NOT MODIFY
# This file is auto-generated (make changes to pre-commit-custom instead)

. \\"$(dirname \\"$0\\")/_/husky.sh\\"
set -e

yarn project
yarn lint-staged

CUSTOM_SCRIPT=\\"$(dirname \\"$0\\")/pre-commit-custom\\"
if [ -x \\"$CUSTOM_SCRIPT\\" ]; then
  \\"$CUSTOM_SCRIPT\\"
fi
",
    "pre-push": "#!/bin/sh

# DO NOT MODIFY
# This file is auto-generated (make changes to pre-push-custom instead)

. \\"$(dirname \\"$0\\")/_/husky.sh\\"
set -e

if [ -t 1 ]; then
  exec </dev/tty
  yarn project-pre-push
fi

CUSTOM_SCRIPT=\\"$(dirname \\"$0\\")/pre-push-custom\\"
if [ -x \\"$CUSTOM_SCRIPT\\" ]; then
  \\"$CUSTOM_SCRIPT\\"
fi
",
  },
  ".lintstagedrc.js": "// DO NOT MODIFY
// This file is auto-generated (make changes to ./config/.lintstagedrc.js instead)

module.exports = {
  \\"*!(.{js,jsx,ts,tsx})\\": \\"prettier -c -w\\",
  \\"*.{js,jsx,ts,tsx}\\": \\"eslint --cache --fix\\",
};

try {
  Object.assign(module.exports, require(\\"./config/.lintstagedrc\\"));
} catch (_err) {}
",
  ".npmignore": "# DO NOT MODIFY
# This file is auto-generated (make changes to ./config/.npmignore instead)

# Ignore all files and make exceptions only for required files
**

# Include package files
!/package.json
!/README.md
!/CHANGELOG.md

# Include build files (but not .tsbuildinfo)
!dist/**
dist/**/*.tsbuildinfo

# Include source files (so that source maps work)
!src/**

# Remove test/development files from source
__*__

# === Custom Config Rules ===
# (rules from ./config/.npmignore will appear below)
",
  ".nvmrc": "14
",
  ".prettierignore": "# DO NOT MODIFY
# This file is auto-generated (make changes to ./config/.prettierignore instead)

# === Build Files ===
# Files which are the result of transforming other files in the project
dist/

# === Cache Files ===
# Generated by tools for caching
node_modules/
.*cache
.jest
.yarn
*.tsbuildinfo

# === Log Files ===
# Log output files intended to be read by people rather than the project
*.log
.coverage/

# === External Files ===
# Files commonly created by the OS or tools not defined in this project
.DS_Store

# === Generated Files ===
# Files generated by tools from the project
yarn.lock
package-lock.json
.pnp.*
/.npmignore
/.nvmrc
/.yvmrc
/.eslintrc.js
/.prettierrc.js
/.eslintignore
/.prettierignore
/.lintstagedrc.js
/.husky/pre-commit
/.husky/pre-push
/.husky/.gitignore
/tsconfig.build.json
/tsconfig.base.json
/jest.config.js

# === Custom Ignore Patterns ===
# Rules from ./config/.prettierignore will appear below
",
  ".prettierrc.js": "module.exports = {};

try {
  // TODO: Merge these in smartly rather than just overwriting everything
  Object.assign(module.exports, require(\\"./config/.prettierrc\\"));
} catch (_err) {}
",
  ".vim": Object {
    "coc-settings.json": "{
  \\"eslint.packageManager\\": \\"yarn\\",
  \\"eslint.nodePath\\": \\".yarn/sdks\\",
  \\"workspace.workspaceFolderCheckCwd\\": false,
  \\"tsserver.tsdk\\": \\".yarn/sdks/typescript/lib\\"
}
",
  },
  ".vscode": Object {
    "extensions.json": "{
  \\"recommendations\\": [
    \\"dbaeumer.vscode-eslint\\",
    \\"esbenp.prettier-vscode\\",
    \\"arcanis.vscode-zipfs\\"
  ]
}
",
    "settings.json": "{
  \\"editor.formatOnSave\\": true,
  \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\",
  \\"eslint.format.enable\\": true,
  \\"typescript.tsdk\\": \\".yarn/sdks/typescript/lib\\",
  \\"search.exclude\\": { \\"**/.yarn\\": true, \\"**/.pnp.*\\": true },
  \\"eslint.nodePath\\": \\".yarn/sdks\\",
  \\"prettier.prettierPath\\": \\".yarn/sdks/prettier/index.js\\",
  \\"typescript.enablePromptUseWorkspaceTsdk\\": true,
  \\"[javascript]\\": { \\"editor.defaultFormatter\\": \\"dbaeumer.vscode-eslint\\" },
  \\"[javascriptreact]\\": { \\"editor.defaultFormatter\\": \\"dbaeumer.vscode-eslint\\" },
  \\"[typescript]\\": { \\"editor.defaultFormatter\\": \\"dbaeumer.vscode-eslint\\" },
  \\"[typescriptreact]\\": { \\"editor.defaultFormatter\\": \\"dbaeumer.vscode-eslint\\" }
}
",
  },
  ".yarn": Object {
    "plugins": Object {
      "@yarnpkg": Object {
        "plugin-typescript.cjs": "Hash: 0779a5d254f388f8d86f7f38262e4fb2292979bdc5a0bb34517141ac868476e1",
        "plugin-version.cjs": "Hash: 319f6c5f50390e867cfa4a073e41a7d1773a8db9c5fd770802338264dca1234d",
        "plugin-workspace-tools.cjs": "Hash: c53639f3eaf1ac536bb3e333e1e1215c4c5cd8316f3c628e6cb447150d5d30b6",
      },
    },
    "releases": Object {
      "yarn-berry.cjs": "Hash: 57ec2d26a54c312a1848599265be6aba0e2e5f734eaba3fcd4c491429fefa21f",
    },
    "sdks": Object {
      "eslint": Object {
        "bin": Object {
          "eslint.js": "Hash: de78a19681b83da97f74ea43ae67e354967b775d4d0d9c3b052ee91e4af12f1c",
        },
        "lib": Object {
          "api.js": "Hash: d1e3cadf8af3a125e90975f993ad7cbd0aa04752d8ab1157dd916db0378fb90d",
        },
        "package.json": "Hash: c9321524936f0a9c82b9fd3d97b83c2cd867ab6780f24176362bd34327d81d18",
      },
      "integrations.yml": "Hash: 52147d4a1b257a746ca9469feffd8fa24a46978564f19390f5d8ed554383d145",
      "prettier": Object {
        "index.js": "Hash: 224d6125af96a301bf93ff284e4d6053b320d342293533912242cc30ad8b41d6",
        "package.json": "Hash: 1099c76ce195b4553905334f8ecff47ea63ccb56189dd6e9f86a42103d76650b",
      },
      "typescript": Object {
        "bin": Object {
          "tsc": "Hash: 4b896b9a38f93907101c2f1807693b37a4d183094c08f311859593ab59d16104",
          "tsserver": "Hash: 9fb4f7af04706aacf71c759d6fcb3bcad1ca474891b22398af7d7cc1e3453bb5",
        },
        "lib": Object {
          "tsc.js": "Hash: 2b1c4a77be8a001ce1d2a6bc939ffff3435e7c38bdadabef032ca052f5f910bc",
          "tsserver.js": "Hash: 0cd3711c2e64725b2f98014da0277cd1a80ce9894d76d7664cb98c30a6269d2b",
          "tsserverlibrary.js": "Hash: b199fba5aab91a7fd630b00b96de035e18e2b392d2b84f6bdbe2dd9f4e2b53d6",
          "typescript.js": "Hash: 35af84b9ed1b39c2bca4804a402b7c7493de057abd2eb96707c58c26933b323b",
        },
        "package.json": "Hash: a37637cd5bf128d53d887a9d21e9dbd7a2b620b6212fe9ae695d577ff21581cc",
      },
    },
  },
  ".yarnrc.yml": "changesetBaseRefs:
  - master
  - origin/master
  - upstream/master

changesetIgnorePatterns:
  - \\"**/__*__/**/*\\"

npmRegistryServer: https://registry.npmjs.org

plugins:
  - path: .yarn/plugins/@yarnpkg/plugin-typescript.cjs
    spec: \\"@yarnpkg/plugin-typescript\\"
  - path: .yarn/plugins/@yarnpkg/plugin-version.cjs
    spec: \\"@yarnpkg/plugin-version\\"
  - path: .yarn/plugins/@yarnpkg/plugin-workspace-tools.cjs
    spec: \\"@yarnpkg/plugin-workspace-tools\\"

yarnPath: .yarn/releases/yarn-berry.cjs
",
  ".yvmrc": "^1.22.10
",
  "CONTRIBUTING.md": "Hi! 👋 Contributions are welcome -- feel free to open a PR for small fixes or open an issue for bigger changes, discussion or if unsure about how to implement something.

## Dev Instructions

Before starting, install dependencies with:

\`\`\`sh
yarn
\`\`\`

Common commands are:

\`\`\`sh
yarn test:watch
yarn lint:fix
\`\`\`

See [package.json](./package.json) for more.

## Releasing changes

When you run \`git push\` you should be prompted to add a changeset if one doesn't already exist. This will ask for a description for the change to appear in the changelog as well as the type of bump (major, minor or patch) to make to the package. A PR without a changelog will not perform a release or bump the package version.
",
  "README.md": "# @jstm-test/test

_Test package_

## Contributing

See [CONTRIBUTING.md](./CONTRIBUTING.md) for instructions how to develop locally and make changes.
",
  "config": Object {
    ".jstmrc.json": "{}
",
  },
  "jest.config.js": "// DO NOT MODIFY
// This file is auto-generated (make changes to ./config/jest.config.js instead)
const { getModuleNameMap } = require(\\"@jstm/core\\");

module.exports = {
  automock: false,
  cacheDirectory: \\"<rootDir>/.jest\\",
  collectCoverage: false,
  coverageDirectory: \\"./.coverage\\",
  collectCoverageFrom: [\\"./src/**/*.{js,jsx,ts,tsx}\\"],
  coverageThreshold: {
    global: {
      branches: 60,
      functions: 60,
      lines: 60,
      statements: 60,
    },
  },
  preset: \\"ts-jest\\",
  testEnvironment: \\"node\\",
  moduleFileExtensions: [\\"ts\\", \\"tsx\\", \\"js\\", \\"jsx\\"],
  testPathIgnorePatterns: [\\"/node_modules/\\", \\"/.cache/\\", \\"/.git/\\", \\"/dist/\\"],
  watchPathIgnorePatterns: [\\"/node_modules/\\", \\"/.cache/\\", \\"/.git/\\", \\"/dist/\\"],
  testRegex: \\"/__tests__/.+.test.(?:js|jsx|ts|tsx)$\\",
  moduleNameMapper: getModuleNameMap(__dirname),
};

try {
  Object.assign(module.exports, require(\\"./config/jest.config\\"));
} catch (_err) {}
",
  "package.json": "{
  \\"name\\": \\"@jstm-test/test\\",
  \\"version\\": \\"0.0.1\\",
  \\"description\\": \\"Test package\\",
  \\"keywords\\": [],
  \\"homepage\\": \\"https://github.com/testorg/testrepo#readme\\",
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://github.com/testorg/testrepo.git\\"
  },
  \\"bugs\\": {
    \\"url\\": \\"https://github.com/testorg/testrepo/issues\\"
  },
  \\"author\\": \\"Test Person\\",
  \\"license\\": \\"MIT\\",
  \\"main\\": \\"dist/index.js\\",
  \\"types\\": \\"dist/index.d.ts\\",
  \\"publishConfig\\": {
    \\"access\\": \\"public\\",
    \\"registry\\": \\"https://registry.npmjs.org\\"
  },
  \\"engines\\": {
    \\"node\\": \\">=10\\"
  },
  \\"scripts\\": {
    \\"=== Generated Scripts (do not modify) ===\\": \\"\\",
    \\"lint:eslint\\": \\"project && eslint --cache --ext js,jsx,ts,tsx ./\\",
    \\"lint:prettier\\": \\"project && prettier -c \\\\\\"./**/*{.json,.md}\\\\\\"\\",
    \\"lint:fix\\": \\"project && eslint --cache --ext js,jsx,ts,tsx ./ --fix && prettier -c \\\\\\"./**/*{.json,.md}\\\\\\" --write && run-if-script-exists lint:fix:custom\\",
    \\"lint\\": \\"project && eslint --cache --ext js,jsx,ts,tsx ./ && prettier -c \\\\\\"./**/*{.json,.md}\\\\\\" && run-if-script-exists lint:custom\\",
    \\"build:clean\\": \\"project && rimraf \\\\\\"./dist\\\\\\" \\\\\\"*.tsbuildinfo\\\\\\" && run-if-script-exists build:clean:custom\\",
    \\"build:typescript\\": \\"project && tsc -p ./tsconfig.build.json\\",
    \\"build:watch\\": \\"project && tsc -p ./tsconfig.build.json -w\\",
    \\"build\\": \\"project && run-if-script-exists build:custom-before && tsc -p ./tsconfig.build.json && run-if-script-exists build:custom\\",
    \\"test:jest\\": \\"project && jest --passWithNoTests\\",
    \\"test:watch\\": \\"project && jest --passWithNoTests --watch\\",
    \\"test\\": \\"project && jest --passWithNoTests && run-if-script-exists test:custom\\",
    \\"test:typecheck\\": \\"project && tsc -p ./tsconfig.json --noEmit && tsc -p ./tsconfig.build.json --noEmit\\",
    \\"test:all\\": \\"project && tsc -p ./tsconfig.json --noEmit && tsc -p ./tsconfig.build.json --noEmit && eslint --cache --ext js,jsx,ts,tsx ./ && prettier -c \\\\\\"./**/*{.json,.md}\\\\\\" && run-if-script-exists lint:custom && jest --passWithNoTests && run-if-script-exists test:custom\\",
    \\"release\\": \\"project && rimraf \\\\\\"./dist\\\\\\" \\\\\\"*.tsbuildinfo\\\\\\" && run-if-script-exists build:clean:custom && run-if-script-exists build:custom-before && tsc -p ./tsconfig.build.json && run-if-script-exists build:custom && changeset publish && run-if-script-exists release:custom\\",
    \\"prepare\\": \\"project && husky install && run-if-script-exists prepare:custom\\",
    \\"=== (end generated scripts) ===\\": \\"\\",
    \\"\\": \\"\\"
  },
  \\"devDependencies\\": {
    \\"jest\\": \\"27.2.0\\",
    \\"ts-jest\\": \\"27.0.5\\",
    \\"@types/jest\\": \\"27.0.1\\",
    \\"rimraf\\": \\"3.0.2\\",
    \\"@changesets/cli\\": \\"2.17.0\\",
    \\"@changesets/get-release-plan\\": \\"3.0.1\\",
    \\"@changesets/release-utils\\": \\"0.1.0\\",
    \\"eslint\\": \\"7.32.0\\",
    \\"prettier\\": \\"2.4.0\\",
    \\"@typescript-eslint/eslint-plugin\\": \\"4.31.1\\",
    \\"@typescript-eslint/parser\\": \\"4.31.1\\",
    \\"eslint-config-prettier\\": \\"8.3.0\\",
    \\"eslint-plugin-import\\": \\"2.24.2\\",
    \\"eslint-import-resolver-node\\": \\"0.3.6\\",
    \\"eslint-import-resolver-typescript\\": \\"2.5.0\\",
    \\"eslint-plugin-jest\\": \\"24.4.0\\",
    \\"eslint-plugin-only-warn\\": \\"1.0.3\\",
    \\"eslint-plugin-prettier\\": \\"4.0.0\\",
    \\"husky\\": \\"7.0.2\\",
    \\"lint-staged\\": \\"11.1.2\\",
    \\"typescript\\": \\"4.4.3\\",
    \\"ts-node\\": \\"10.2.1\\",
    \\"ts-node-dev\\": \\"1.1.8\\",
    \\"tsconfig-paths\\": \\"3.11.0\\",
    \\"node-notifier\\": \\"10.0.0\\",
    \\"@types/node\\": \\"16.9.1\\",
    \\"@jstm/preset-node\\": \\"1.0.0\\",
    \\"@jstm/core\\": \\"1.0.0\\"
  }
}
",
  "src": Object {
    "index.ts": "",
  },
  "tsconfig.base.json": "// DO NOT MODIFY
// This file is auto-generated (make changes to ./tsconfig.json instead)
{
  \\"include\\": [\\"**/*\\", \\"**/.*\\", \\"**/*.json\\", \\"**/.*.json\\"],
  \\"exclude\\": [
    \\"**/dist/**/*\\",
    \\"**/node_modules/**/*\\",
    \\"**/.git/**/*\\",
    \\"**/.*cache/**/*\\",
    \\"**/.jest/**/*\\",
    \\"**/.yarn/**/*\\",
    \\"**/.coverage/**/*\\",
    \\"./.pnp.*\\"
  ],
  \\"compilerOptions\\": {
    \\"noEmit\\": true,
    \\"rootDir\\": \\"./\\",
    \\"baseUrl\\": \\"./\\",
    \\"target\\": \\"ES2017\\",
    \\"module\\": \\"commonjs\\",
    \\"lib\\": [\\"ES2017\\"],
    \\"types\\": [\\"node\\", \\"jest\\"],
    \\"jsx\\": \\"react\\",
    \\"allowJs\\": true,
    \\"resolveJsonModule\\": true,
    \\"composite\\": true,
    \\"skipLibCheck\\": true,
    \\"sourceMap\\": true,
    \\"declaration\\": true,
    \\"importHelpers\\": true,
    \\"removeComments\\": false,
    \\"stripInternal\\": false,
    \\"moduleResolution\\": \\"node\\",
    \\"allowSyntheticDefaultImports\\": true,
    \\"esModuleInterop\\": true,
    \\"emitDecoratorMetadata\\": true,
    \\"experimentalDecorators\\": true,
    \\"strict\\": true,
    \\"noImplicitAny\\": true,
    \\"allowUnreachableCode\\": true,
    \\"allowUnusedLabels\\": false,
    \\"alwaysStrict\\": true,
    \\"forceConsistentCasingInFileNames\\": true,
    \\"noFallthroughCasesInSwitch\\": true,
    \\"noImplicitReturns\\": true,
    \\"noImplicitThis\\": true,
    \\"noUnusedLocals\\": true,
    \\"noUnusedParameters\\": false,
    \\"strictFunctionTypes\\": false,
    \\"strictNullChecks\\": true,
    \\"strictPropertyInitialization\\": false,

    \\"paths\\": {}
  }
}
",
  "tsconfig.build.json": "// DO NOT MODIFY
// This file is auto-generated (make changes to ./tsconfig.json instead)
{
  \\"extends\\": \\"./tsconfig.json\\",
  \\"include\\": [\\"./src/**/*\\", \\"./src/**/*.json\\"],
  \\"exclude\\": [\\"**/__*__/**/*\\"],
  \\"compilerOptions\\": {
    \\"noEmit\\": false,
    \\"rootDir\\": \\"./src\\",
    \\"outDir\\": \\"./dist\\",
    \\"types\\": [\\"node\\"]
  }
}
",
  "tsconfig.json": "{ \\"extends\\": \\"./tsconfig.base.json\\" }
",
}
`;

exports[`monorepo: config prompts 1`] = `
Set {
  "isMonorepo",
  "srcDir",
  "packageName",
  "description",
  "distDir",
  "nodeMinVersion",
  "npmRegistry",
  "npmAccess",
  "repoUrl",
  "packageJsonAuthor",
  "license",
  "subpackageName",
  "subpackageDescription",
  "nodeTargetVersion",
  "mainBranch",
}
`;

exports[`monorepo: file structure 1`] = `
Object {
  ".eslintignore": "# DO NOT MODIFY
# This file is auto-generated (make changes to ./config/.eslintignore instead)

# === Build Files ===
# Files which are the result of transforming other files in the project
dist/

# === Cache Files ===
# Generated by tools for caching
node_modules/
.*cache
.jest
.yarn
*.tsbuildinfo

# === Log Files ===
# Log output files intended to be read by people rather than the project
*.log
.coverage/

# === External Files ===
# Files commonly created by the OS or tools not defined in this project
.DS_Store

# === Generated Files ===
# Files generated by tools from the project
yarn.lock
package-lock.json
.pnp.*
/.npmignore
/.nvmrc
/.yvmrc
/.eslintrc.js
/.prettierrc.js
/.eslintignore
/.prettierignore
/.lintstagedrc.js
/.husky/pre-commit
/.husky/.gitignore
/tsconfig.build.json
/tsconfig.base.json
/jest.config.js

# === Custom Ignore Patterns ===
# Rules from ./config/.eslintignore will appear below
",
  ".eslintrc.js": "// DO NOT MODIFY
// This file is auto-generated (make changes to ./config/.eslintrc.js instead)
const fs = require(\\"fs\\");
const path = require(\\"path\\");

const customConfigs = fs.readdirSync(path.join(__dirname, \\"config\\"));
const customEslintrcPaths = [\\".eslintrc.json\\", \\".eslintrc.js\\"]
  .filter((name) => customConfigs.includes(name))
  .map((name) => \`./\${path.join(\\"config\\", name)}\`);

module.exports = {
  root: true,
  env: {
    node: true,
    commonjs: true,
    es2020: true,
  },
  settings: {
    \\"import/resolver\\": {
      typescript: {},
    },
  },
  parser: \\"@typescript-eslint/parser\\",
  extends: [
    \\"eslint:recommended\\",
    \\"plugin:prettier/recommended\\",
    \\"plugin:import/errors\\",
    \\"plugin:@typescript-eslint/eslint-recommended\\",
    \\"plugin:@typescript-eslint/recommended\\",
    \\"plugin:@typescript-eslint/recommended-requiring-type-checking\\",
    \\"plugin:import/typescript\\",
    ...customEslintrcPaths,
  ],
  plugins: [
    \\"@typescript-eslint/eslint-plugin\\",
    ...(process.env.VSCODE_PID ? [\\"only-warn\\"] : []),
  ],
  parserOptions: {
    sourceType: \\"module\\",
    ecmaVersion: 2020,
    tsconfigRootDir: __dirname,
    project: [\\"./tsconfig.json\\"],
  },
  overrides: [
    {
      files: [\\"**/*.{js,jsx}\\"],
      rules: {
        \\"@typescript-eslint/no-var-requires\\": \\"off\\",
        \\"@typescript-eslint/explicit-function-return-type\\": \\"off\\",
        \\"@typescript-eslint/no-unsafe-return\\": \\"off\\",
        \\"@typescript-eslint/no-unsafe-member-access\\": \\"off\\",
        \\"@typescript-eslint/no-unsafe-assignment\\": \\"off\\",
        \\"@typescript-eslint/no-unsafe-call\\": \\"off\\",
      },
    },
    {
      files: [\\"**/__*__/**/*.{js,jsx,ts,tsx}\\"],
      env: {
        jest: true,
      },
      rules: {
        \\"@typescript-eslint/no-unsafe-assignment\\": \\"off\\",
        \\"@typescript-eslint/no-unsafe-member-access\\": \\"off\\",
        \\"no-sparse-arrays\\": \\"off\\",
        \\"no-prototype-builtins\\": \\"off\\",
      },
    },
  ],
  rules: {
    // Disabled rules
    \\"no-empty\\": \\"off\\",
    \\"@typescript-eslint/no-empty-function\\": \\"off\\",
    \\"@typescript-eslint/unbound-method\\": \\"off\\",
    \\"@typescript-eslint/require-await\\": \\"off\\",
    \\"@typescript-eslint/no-empty-interface\\": \\"off\\",
    \\"@typescript-eslint/restrict-template-expressions\\": \\"off\\",
    \\"@typescript-eslint/no-explicit-any\\": \\"off\\",
    \\"@typescript-eslint/no-non-null-assertion\\": \\"off\\",

    // Modified rules
    \\"no-constant-condition\\": [\\"error\\", { checkLoops: false }],
    \\"@typescript-eslint/no-unused-vars\\": [
      \\"error\\",
      { argsIgnorePattern: \\"^_\\", varsIgnorePattern: \\"^_\\" },
    ],
    \\"@typescript-eslint/no-misused-promises\\": [
      \\"error\\",
      { checksVoidReturn: false },
    ],
    \\"@typescript-eslint/explicit-function-return-type\\": [
      \\"error\\",
      { allowExpressions: true },
    ],
    \\"@typescript-eslint/ban-types\\": [
      \\"error\\",
      {
        types: {
          // Justification: most of the time this is the type I want
          \\"{}\\": false,
        },
      },
    ],

    // Enabled rules
    \\"import/no-cycle\\": \\"error\\",
    \\"import/no-extraneous-dependencies\\": \\"error\\",
    \\"import/no-duplicates\\": [\\"error\\", { considerQueryString: true }],
    \\"import/order\\": [
      \\"error\\",
      {
        \\"newlines-between\\": \\"always\\",
        groups: [
          \\"builtin\\",
          \\"external\\",
          \\"internal\\",
          [\\"index\\", \\"sibling\\", \\"parent\\"],
        ],
        pathGroups: [
          {
            pattern: \\"react\\",
            group: \\"builtin\\",
            position: \\"before\\",
          },
        ],
        pathGroupsExcludedImportTypes: [\\"react\\"],
        alphabetize: { order: \\"asc\\" },
      },
    ],
    \\"sort-imports\\": [
      \\"error\\",
      {
        ignoreDeclarationSort: true,
        ignoreMemberSort: false,
      },
    ],
    \\"import/first\\": \\"error\\",
    \\"import/newline-after-import\\": \\"error\\",
    \\"import/no-useless-path-segments\\": \\"error\\",
    \\"import/no-self-import\\": \\"error\\",
    \\"@typescript-eslint/no-floating-promises\\": [\\"error\\", { ignoreVoid: true }],
  },
};
",
  ".github": Object {
    "workflows": Object {
      "ci.yml": "# DO NOT MODIFY
# This file is auto-generated (make another YAML file in this directory instead
# or create a file in ./config/.github/workflows/ci.yml with contents to merge)
name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - \\"*\\"

env:
  node_version: 14

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    outputs:
      release_required: \${{ steps.release_required.outputs.result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # Fetch Git history so that Changesets can check if release is required
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: \${{ env.node_version }}
      - name: Install dependencies
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Test
        run: |
          set -e
          yarn run-if-script-exists test:ci:before
          yarn test:all
          yarn run-if-script-exists test:ci:after
      - name: Check if release is required
        uses: actions/github-script@v3
        id: release_required
        with:
          script: |
            const path = require('path');
            const fs = require('fs');
            const versionsPath = path.join(process.env.GITHUB_WORKSPACE, '.yarn', 'versions');
            const versionFiles = fs.existsSync(versionsPath) ? fs.readdirSync(versionsPath) : [];
            return versionFiles.length > 0;

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: test
    if: \${{ github.ref == 'refs/heads/master' && needs.test.outputs.release_required == 'true' }}
    environment: Release
    outputs:
      release_upload_url: \${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # Fetch Git history so that Changesets can generate changelogs with correct commits
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: \${{ env.node_version }}
      - name: Install dependencies
        run: yarn install --immutable --immutable-cache
      - name: Bump versions according to changeset
        run: |
          set -e
          git config --global user.name \\"github-actions[bot]\\"
          git config --global user.email \\"github-actions[bot]@users.noreply.github.com\\"
          yarn version apply
          git push --no-verify
      - name: Publish to npm
        id: publish
        run: |
          set -e
          yarn run-if-script-exists release:ci:before
          yarn release
          echo \\"::set-output name=version_tag::$(git describe --tags --abbrev=0)\\"
          echo \\"::set-output name=release_changelog::$(yarn ci-github-print-changelog)\\"
          yarn run-if-script-exists release:ci:after
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: \${{ secrets.NPM_TOKEN }}
          YARN_NPM_AUTH_TOKEN: \${{ secrets.NPM_TOKEN }}
",
    },
  },
  ".gitignore": "# === Generated Ignore Patterns (do not modify) ===
# You may add your own rules below the end of this generated section.

# Commonly ignored files
node_modules/
.*cache
.jest
*.tsbuildinfo
*.log
.coverage/
.DS_Store
CVS
.svn
.hg
.lock-wscript
.wafpickle-N
.*.swp
._*
.npmrc
.yarnrc
config.gypi
/package-lock.json

# Rules for Yarn zero-installs
.yarn/*
!.yarn/cache
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions

# jstm generated files
dist/
/.npmignore
/.nvmrc
/.yvmrc
/.eslintrc.js
/.prettierrc.js
/.eslintignore
/.prettierignore
/.lintstagedrc.js
/.husky/pre-commit
/.husky/.gitignore
/tsconfig.build.json
/tsconfig.base.json
/jest.config.js
# === (end generated patterns) ===

# Place custom ignore patterns below here and they will not be removed
",
  ".husky": Object {
    ".gitignore": "_
",
    "pre-commit": "#!/bin/sh

# DO NOT MODIFY
# This file is auto-generated (make changes to pre-commit-custom instead)

. \\"$(dirname \\"$0\\")/_/husky.sh\\"
set -e

yarn project
yarn lint-staged

CUSTOM_SCRIPT=\\"$(dirname \\"$0\\")/pre-commit-custom\\"
if [ -x \\"$CUSTOM_SCRIPT\\" ]; then
  \\"$CUSTOM_SCRIPT\\"
fi
",
  },
  ".lintstagedrc.js": "// DO NOT MODIFY
// This file is auto-generated (make changes to ./config/.lintstagedrc.js instead)

module.exports = {
  \\"*!(.{js,jsx,ts,tsx})\\": \\"prettier -c -w\\",
  \\"*.{js,jsx,ts,tsx}\\": \\"eslint --cache --fix\\",
};

try {
  Object.assign(module.exports, require(\\"./config/.lintstagedrc\\"));
} catch (_err) {}
",
  ".npmignore": "# DO NOT MODIFY
# This file is auto-generated (make changes to ./config/.npmignore instead)

# Ignore all files and make exceptions only for required files
**

# Include package files
!/package.json
!/README.md
!/CHANGELOG.md

# Include build files (but not .tsbuildinfo)
!dist/**
dist/**/*.tsbuildinfo

# Include source files (so that source maps work)
!src/**

# Remove test/development files from source
__*__

# === Custom Config Rules ===
# (rules from ./config/.npmignore will appear below)
",
  ".nvmrc": "14
",
  ".prettierignore": "# DO NOT MODIFY
# This file is auto-generated (make changes to ./config/.prettierignore instead)

# === Build Files ===
# Files which are the result of transforming other files in the project
dist/

# === Cache Files ===
# Generated by tools for caching
node_modules/
.*cache
.jest
.yarn
*.tsbuildinfo

# === Log Files ===
# Log output files intended to be read by people rather than the project
*.log
.coverage/

# === External Files ===
# Files commonly created by the OS or tools not defined in this project
.DS_Store

# === Generated Files ===
# Files generated by tools from the project
yarn.lock
package-lock.json
.pnp.*
/.npmignore
/.nvmrc
/.yvmrc
/.eslintrc.js
/.prettierrc.js
/.eslintignore
/.prettierignore
/.lintstagedrc.js
/.husky/pre-commit
/.husky/.gitignore
/tsconfig.build.json
/tsconfig.base.json
/jest.config.js

# === Custom Ignore Patterns ===
# Rules from ./config/.prettierignore will appear below
",
  ".prettierrc.js": "module.exports = {};

try {
  // TODO: Merge these in smartly rather than just overwriting everything
  Object.assign(module.exports, require(\\"./config/.prettierrc\\"));
} catch (_err) {}
",
  ".vim": Object {
    "coc-settings.json": "{
  \\"eslint.packageManager\\": \\"yarn\\",
  \\"eslint.nodePath\\": \\".yarn/sdks\\",
  \\"workspace.workspaceFolderCheckCwd\\": false,
  \\"tsserver.tsdk\\": \\".yarn/sdks/typescript/lib\\"
}
",
  },
  ".vscode": Object {
    "extensions.json": "{
  \\"recommendations\\": [
    \\"dbaeumer.vscode-eslint\\",
    \\"esbenp.prettier-vscode\\",
    \\"arcanis.vscode-zipfs\\"
  ]
}
",
    "settings.json": "{
  \\"editor.formatOnSave\\": true,
  \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\",
  \\"eslint.format.enable\\": true,
  \\"typescript.tsdk\\": \\".yarn/sdks/typescript/lib\\",
  \\"search.exclude\\": { \\"**/.yarn\\": true, \\"**/.pnp.*\\": true },
  \\"eslint.nodePath\\": \\".yarn/sdks\\",
  \\"prettier.prettierPath\\": \\".yarn/sdks/prettier/index.js\\",
  \\"typescript.enablePromptUseWorkspaceTsdk\\": true,
  \\"[javascript]\\": { \\"editor.defaultFormatter\\": \\"dbaeumer.vscode-eslint\\" },
  \\"[javascriptreact]\\": { \\"editor.defaultFormatter\\": \\"dbaeumer.vscode-eslint\\" },
  \\"[typescript]\\": { \\"editor.defaultFormatter\\": \\"dbaeumer.vscode-eslint\\" },
  \\"[typescriptreact]\\": { \\"editor.defaultFormatter\\": \\"dbaeumer.vscode-eslint\\" }
}
",
  },
  ".yarn": Object {
    "plugins": Object {
      "@yarnpkg": Object {
        "plugin-typescript.cjs": "Hash: 0779a5d254f388f8d86f7f38262e4fb2292979bdc5a0bb34517141ac868476e1",
        "plugin-version.cjs": "Hash: 319f6c5f50390e867cfa4a073e41a7d1773a8db9c5fd770802338264dca1234d",
        "plugin-workspace-tools.cjs": "Hash: c53639f3eaf1ac536bb3e333e1e1215c4c5cd8316f3c628e6cb447150d5d30b6",
      },
    },
    "releases": Object {
      "yarn-berry.cjs": "Hash: 57ec2d26a54c312a1848599265be6aba0e2e5f734eaba3fcd4c491429fefa21f",
    },
    "sdks": Object {
      "eslint": Object {
        "bin": Object {
          "eslint.js": "Hash: de78a19681b83da97f74ea43ae67e354967b775d4d0d9c3b052ee91e4af12f1c",
        },
        "lib": Object {
          "api.js": "Hash: d1e3cadf8af3a125e90975f993ad7cbd0aa04752d8ab1157dd916db0378fb90d",
        },
        "package.json": "Hash: c9321524936f0a9c82b9fd3d97b83c2cd867ab6780f24176362bd34327d81d18",
      },
      "integrations.yml": "Hash: 52147d4a1b257a746ca9469feffd8fa24a46978564f19390f5d8ed554383d145",
      "prettier": Object {
        "index.js": "Hash: 224d6125af96a301bf93ff284e4d6053b320d342293533912242cc30ad8b41d6",
        "package.json": "Hash: 1099c76ce195b4553905334f8ecff47ea63ccb56189dd6e9f86a42103d76650b",
      },
      "typescript": Object {
        "bin": Object {
          "tsc": "Hash: 4b896b9a38f93907101c2f1807693b37a4d183094c08f311859593ab59d16104",
          "tsserver": "Hash: 9fb4f7af04706aacf71c759d6fcb3bcad1ca474891b22398af7d7cc1e3453bb5",
        },
        "lib": Object {
          "tsc.js": "Hash: 2b1c4a77be8a001ce1d2a6bc939ffff3435e7c38bdadabef032ca052f5f910bc",
          "tsserver.js": "Hash: 0cd3711c2e64725b2f98014da0277cd1a80ce9894d76d7664cb98c30a6269d2b",
          "tsserverlibrary.js": "Hash: b199fba5aab91a7fd630b00b96de035e18e2b392d2b84f6bdbe2dd9f4e2b53d6",
          "typescript.js": "Hash: 35af84b9ed1b39c2bca4804a402b7c7493de057abd2eb96707c58c26933b323b",
        },
        "package.json": "Hash: a37637cd5bf128d53d887a9d21e9dbd7a2b620b6212fe9ae695d577ff21581cc",
      },
    },
  },
  ".yarnrc.yml": "changesetBaseRefs:
  - master
  - origin/master
  - upstream/master

changesetIgnorePatterns:
  - \\"**/__*__/**/*\\"

npmRegistryServer: https://registry.npmjs.org

plugins:
  - path: .yarn/plugins/@yarnpkg/plugin-typescript.cjs
    spec: \\"@yarnpkg/plugin-typescript\\"
  - path: .yarn/plugins/@yarnpkg/plugin-version.cjs
    spec: \\"@yarnpkg/plugin-version\\"
  - path: .yarn/plugins/@yarnpkg/plugin-workspace-tools.cjs
    spec: \\"@yarnpkg/plugin-workspace-tools\\"

yarnPath: .yarn/releases/yarn-berry.cjs
",
  ".yvmrc": "^1.22.10
",
  "CONTRIBUTING.md": "Hi! 👋 Contributions are welcome -- feel free to open a PR for small fixes or open an issue for bigger changes, discussion or if unsure about how to implement something.

## Dev Instructions

Before starting, install dependencies with:

\`\`\`sh
yarn
\`\`\`

Common commands are:

\`\`\`sh
yarn test:watch
yarn lint:fix
\`\`\`

See [package.json](./package.json) for more.

## Releasing changes

Run \`yarn workspace [PACKAGE_NAME] version [BUMP_TYPE]\` where \`[PACKAGE_NAME]\` is the name of the package you want to release when merging the PR and \`[BUMP_TYPE]\` is either \`patch\`, \`minor\` or \`major\` depending on the severity of the change. Commit the file which is created as a result of this command.
",
  "README.md": "# @jstm-test/test

_Test package_

## Contributing

See [CONTRIBUTING.md](./CONTRIBUTING.md) for instructions how to develop locally and make changes.
",
  "config": Object {
    ".jstmrc.json": "{
  \\"isMonorepo\\": true
}
",
  },
  "jest.config.js": "// DO NOT MODIFY
// This file is auto-generated (make changes to ./config/jest.config.js instead)
const { getModuleNameMap } = require(\\"@jstm/core\\");

module.exports = {
  automock: false,
  cacheDirectory: \\"<rootDir>/.jest\\",
  collectCoverage: false,
  coverageDirectory: \\"./.coverage\\",
  collectCoverageFrom: [\\"./src/**/*.{js,jsx,ts,tsx}\\"],
  coverageThreshold: {
    global: {
      branches: 60,
      functions: 60,
      lines: 60,
      statements: 60,
    },
  },
  preset: \\"ts-jest\\",
  testEnvironment: \\"node\\",
  moduleFileExtensions: [\\"ts\\", \\"tsx\\", \\"js\\", \\"jsx\\"],
  testPathIgnorePatterns: [\\"/node_modules/\\", \\"/.cache/\\", \\"/.git/\\", \\"/dist/\\"],
  watchPathIgnorePatterns: [\\"/node_modules/\\", \\"/.cache/\\", \\"/.git/\\", \\"/dist/\\"],
  testRegex: \\"/__tests__/.+.test.(?:js|jsx|ts|tsx)$\\",
  moduleNameMapper: getModuleNameMap(__dirname),
};

try {
  Object.assign(module.exports, require(\\"./config/jest.config\\"));
} catch (_err) {}
",
  "package.json": "{
  \\"name\\": \\"@jstm-test/test\\",
  \\"private\\": true,
  \\"version\\": \\"0.0.1\\",
  \\"description\\": \\"Test package\\",
  \\"keywords\\": [],
  \\"homepage\\": \\"https://github.com/testorg/testrepo#readme\\",
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://github.com/testorg/testrepo.git\\"
  },
  \\"bugs\\": {
    \\"url\\": \\"https://github.com/testorg/testrepo/issues\\"
  },
  \\"author\\": \\"Test Person\\",
  \\"license\\": \\"MIT\\",
  \\"workspaces\\": {
    \\"packages\\": [
      \\"./packages/*\\"
    ]
  },
  \\"engines\\": {
    \\"node\\": \\">=10\\"
  },
  \\"scripts\\": {
    \\"=== Generated Scripts (do not modify) ===\\": \\"\\",
    \\"lint:eslint\\": \\"project && eslint --cache --ext js,jsx,ts,tsx ./\\",
    \\"lint:prettier\\": \\"project && prettier -c \\\\\\"./**/*{.json,.md}\\\\\\"\\",
    \\"lint:fix\\": \\"project && eslint --cache --ext js,jsx,ts,tsx ./ --fix && prettier -c \\\\\\"./**/*{.json,.md}\\\\\\" --write && run-if-script-exists lint:fix:custom\\",
    \\"lint\\": \\"project && eslint --cache --ext js,jsx,ts,tsx ./ && prettier -c \\\\\\"./**/*{.json,.md}\\\\\\" && run-if-script-exists lint:custom\\",
    \\"build:clean\\": \\"project && rimraf \\\\\\"./dist\\\\\\" \\\\\\"*.tsbuildinfo\\\\\\" && run-if-script-exists build:clean:custom\\",
    \\"build:typescript\\": \\"project && tsc -b ./tsconfig.build.json\\",
    \\"build:watch\\": \\"project && tsc -b ./tsconfig.build.json -w\\",
    \\"build\\": \\"project && run-if-script-exists build:custom-before && tsc -b ./tsconfig.build.json && run-if-script-exists build:custom\\",
    \\"test:jest\\": \\"project && jest --passWithNoTests\\",
    \\"test:watch\\": \\"project && jest --passWithNoTests --watch\\",
    \\"test\\": \\"project && jest --passWithNoTests && run-if-script-exists test:custom\\",
    \\"test:typecheck\\": \\"project && tsc -p ./tsconfig.json --noEmit && tsc -b ./tsconfig.build.json\\",
    \\"test:all\\": \\"project && tsc -p ./tsconfig.json --noEmit && tsc -b ./tsconfig.build.json && eslint --cache --ext js,jsx,ts,tsx ./ && prettier -c \\\\\\"./**/*{.json,.md}\\\\\\" && run-if-script-exists lint:custom && jest --passWithNoTests && run-if-script-exists test:custom\\",
    \\"release\\": \\"project && rimraf \\\\\\"./dist\\\\\\" \\\\\\"*.tsbuildinfo\\\\\\" && run-if-script-exists build:clean:custom && run-if-script-exists build:custom-before && tsc -b ./tsconfig.build.json && run-if-script-exists build:custom && yarn workspaces foreach --verbose --topological --no-private npm publish --tolerate-republish && run-if-script-exists release:custom\\",
    \\"prepare\\": \\"project && husky install && run-if-script-exists prepare:custom\\",
    \\"=== (end generated scripts) ===\\": \\"\\",
    \\"\\": \\"\\"
  },
  \\"devDependencies\\": {
    \\"jest\\": \\"27.2.0\\",
    \\"ts-jest\\": \\"27.0.5\\",
    \\"@types/jest\\": \\"27.0.1\\",
    \\"rimraf\\": \\"3.0.2\\",
    \\"@changesets/cli\\": \\"2.17.0\\",
    \\"@changesets/get-release-plan\\": \\"3.0.1\\",
    \\"@changesets/release-utils\\": \\"0.1.0\\",
    \\"eslint\\": \\"7.32.0\\",
    \\"prettier\\": \\"2.4.0\\",
    \\"@typescript-eslint/eslint-plugin\\": \\"4.31.1\\",
    \\"@typescript-eslint/parser\\": \\"4.31.1\\",
    \\"eslint-config-prettier\\": \\"8.3.0\\",
    \\"eslint-plugin-import\\": \\"2.24.2\\",
    \\"eslint-import-resolver-node\\": \\"0.3.6\\",
    \\"eslint-import-resolver-typescript\\": \\"2.5.0\\",
    \\"eslint-plugin-jest\\": \\"24.4.0\\",
    \\"eslint-plugin-only-warn\\": \\"1.0.3\\",
    \\"eslint-plugin-prettier\\": \\"4.0.0\\",
    \\"husky\\": \\"7.0.2\\",
    \\"lint-staged\\": \\"11.1.2\\",
    \\"typescript\\": \\"4.4.3\\",
    \\"ts-node\\": \\"10.2.1\\",
    \\"ts-node-dev\\": \\"1.1.8\\",
    \\"tsconfig-paths\\": \\"3.11.0\\",
    \\"node-notifier\\": \\"10.0.0\\",
    \\"@types/node\\": \\"16.9.1\\",
    \\"@jstm/preset-node\\": \\"1.0.0\\",
    \\"@jstm/core\\": \\"1.0.0\\"
  }
}
",
  "packages": Object {
    "sample": Object {
      "package.json": "{
  \\"name\\": \\"@jstm-test/sample\\",
  \\"version\\": \\"0.0.1\\",
  \\"description\\": \\"Subpackage description\\",
  \\"keywords\\": [],
  \\"homepage\\": \\"https://github.com/testorg/testrepo#readme\\",
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://github.com/testorg/testrepo.git\\",
    \\"directory\\": \\"packages/sample\\"
  },
  \\"bugs\\": {
    \\"url\\": \\"https://github.com/testorg/testrepo/issues\\"
  },
  \\"author\\": \\"Test Person\\",
  \\"license\\": \\"MIT\\",
  \\"main\\": \\"dist/index.js\\",
  \\"types\\": \\"dist/index.d.ts\\",
  \\"publishConfig\\": {
    \\"access\\": \\"public\\",
    \\"registry\\": \\"https://registry.npmjs.org\\"
  },
  \\"engines\\": {
    \\"node\\": \\">=10\\"
  },
  \\"devDependencies\\": {
    \\"@types/node\\": \\"16.9.1\\"
  }
}
",
      "src": Object {
        "index.ts": "",
      },
      "tsconfig.json": "{
  \\"extends\\": \\"../../tsconfig.json\\",
  \\"include\\": [\\"./src/**/*\\", \\"./src/**/*.json\\"],
  \\"exclude\\": [\\"**/__*__/**/*\\"],
  \\"compilerOptions\\": {
    \\"noEmit\\": false,
    \\"baseUrl\\": \\".\\",
    \\"rootDir\\": \\"./src\\",
    \\"outDir\\": \\"./dist\\",
    \\"types\\": [\\"node\\"]
  },
  \\"references\\": []
}
",
    },
  },
  "tsconfig.base.json": "// DO NOT MODIFY
// This file is auto-generated (make changes to ./tsconfig.json instead)
{
  \\"include\\": [\\"**/*\\", \\"**/.*\\", \\"**/*.json\\", \\"**/.*.json\\"],
  \\"exclude\\": [
    \\"**/dist/**/*\\",
    \\"**/node_modules/**/*\\",
    \\"**/.git/**/*\\",
    \\"**/.*cache/**/*\\",
    \\"**/.jest/**/*\\",
    \\"**/.yarn/**/*\\",
    \\"**/.coverage/**/*\\",
    \\"./.pnp.*\\"
  ],
  \\"compilerOptions\\": {
    \\"noEmit\\": true,
    \\"rootDir\\": \\"./\\",
    \\"baseUrl\\": \\"./\\",
    \\"target\\": \\"ES2017\\",
    \\"module\\": \\"commonjs\\",
    \\"lib\\": [\\"ES2017\\"],
    \\"types\\": [\\"node\\", \\"jest\\"],
    \\"jsx\\": \\"react\\",
    \\"allowJs\\": true,
    \\"resolveJsonModule\\": true,
    \\"composite\\": true,
    \\"skipLibCheck\\": true,
    \\"sourceMap\\": true,
    \\"declaration\\": true,
    \\"importHelpers\\": true,
    \\"removeComments\\": false,
    \\"stripInternal\\": false,
    \\"moduleResolution\\": \\"node\\",
    \\"allowSyntheticDefaultImports\\": true,
    \\"esModuleInterop\\": true,
    \\"emitDecoratorMetadata\\": true,
    \\"experimentalDecorators\\": true,
    \\"strict\\": true,
    \\"noImplicitAny\\": true,
    \\"allowUnreachableCode\\": true,
    \\"allowUnusedLabels\\": false,
    \\"alwaysStrict\\": true,
    \\"forceConsistentCasingInFileNames\\": true,
    \\"noFallthroughCasesInSwitch\\": true,
    \\"noImplicitReturns\\": true,
    \\"noImplicitThis\\": true,
    \\"noUnusedLocals\\": true,
    \\"noUnusedParameters\\": false,
    \\"strictFunctionTypes\\": false,
    \\"strictNullChecks\\": true,
    \\"strictPropertyInitialization\\": false,

    \\"paths\\": {}
  }
}
",
  "tsconfig.build.json": "// DO NOT MODIFY
// This file is auto-generated (make changes to ./tsconfig.json instead)
{
  \\"include\\": [],
  \\"references\\": [{ \\"path\\": \\"packages/sample\\" }]
}
",
  "tsconfig.json": "{ \\"extends\\": \\"./tsconfig.base.json\\" }
",
}
`;

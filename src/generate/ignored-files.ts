interface IgnoreCategoryDefinition {
  heading: string;
  description: string[];
  patterns: string[];
  overrides: string[];
}

export interface IgnoreCategory extends IgnoreCategoryDefinition {}
export class IgnoreCategory {
  constructor(definition: IgnoreCategoryDefinition, public rawLines: string[]) {
    Object.assign(this, definition);
  }

  addLine(lineText: string) {
    this.rawLines.push(lineText);

    const lineTrimmed = lineText.trim();
    const data = lineTrimmed.startsWith('#')
      ? { comment: lineTrimmed.substr(1).trim() }
      : { pattern: lineTrimmed, isNegated: lineTrimmed.startsWith('!') };

    const isComment = lineTrimmed.startsWith('#');
    if (!isComment && lineTrimmed.length > 0) {
      if (data.isNegated) {
        const pattern = data.pattern.substr(1);
        if (this.overrides.includes(pattern)) {
          this.rawLines.pop();
        } else {
          this.overrides.push(pattern);
        }
      } else {
        if (this.patterns.includes(lineTrimmed)) {
          this.rawLines.pop();
        } else {
          this.patterns.push(lineTrimmed);
        }
      }
    }
  }

  trim() {
    while (this.rawLines.length > 0 && !this.rawLines[this.rawLines.length - 1].trim()) {
      this.rawLines.pop();
    }
  }
}

const declareIgnoredFiles = <T extends string>(
  ignoredFiles: Record<
    T,
    Pick<IgnoreCategory, 'heading' | 'description' | 'patterns' | 'overrides'>
  >,
) =>
  Object.assign(
    {},
    ...Object.entries<IgnoreCategoryDefinition>(ignoredFiles).map(([key, category]) => ({
      [key]: new IgnoreCategory(category, [
        `# === ${category.heading} ===`,
        ...category.description.map(line => '# ' + line),
        ...category.patterns,
        ...category.overrides.map(pattern => '!' + pattern),
      ]),
    })),
  ) as Record<T, IgnoreCategory>;

export const generateIgnored = () =>
  declareIgnoredFiles({
    build: {
      heading: 'Build Files',
      description: [
        'Files which are the result of transforming other files in the project',
        'First item should be the path to the Typescript build output directory without any glob patterns',
      ],
      patterns: ['dist'],
      overrides: [],
    },
    cache: {
      heading: 'Cache Files',
      description: ['Generated by tools for caching'],
      patterns: [
        'node_modules',
        '.*cache',
        '.jest',
        '.yarn',
        '*.tsbuildinfo',
        'yarn.lock',
        'package-lock.json',
      ],
      overrides: ['yarn.lock'],
    },
    log: {
      heading: 'Log Files',
      description: ['Log output files intended to be read by people rather than the project'],
      patterns: ['*.log', 'coverage'],
      overrides: [],
    },
    external: {
      heading: 'External Files',
      description: ['Files commonly created by the OS or tools not defined in this project'],
      patterns: ['.DS_Store'],
      overrides: [],
    },
    generated: {
      heading: 'Generated Files',
      description: ['Files generated by tools from the project'],
      patterns: [
        '/.gitignore',
        '/.npmignore',
        '/.prettierrc.js',
        '/.prettierignore',
        '/.eslintrc.js',
        '/.eslintignore',
        '/jest.config.js',
        '/tsconfig.json',
        '/tsconfig.build.json',
        '/.nvmrc',
        '/.vscode',
        '/.changeset/README.md',
      ],
      overrides: ['/.gitignore'],
    },
    other: {
      heading: 'Other Files',
      description: ['Any other ignored files'],
      patterns: [],
      overrides: [],
    },
  });

export type IgnoredFiles = ReturnType<typeof generateIgnored>;
